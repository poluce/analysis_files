@startuml DSC_TGA_Four_Layer_Architecture
!define RECTANGLE class

skinparam packageStyle rectangle
skinparam linetype ortho
skinparam nodesep 10
skinparam ranksep 20

' ÂÆö‰πâÈ¢úËâ≤‰∏ªÈ¢ò
skinparam package {
    BackgroundColor<<Ë°®Á§∫Â±Ç>> #E3F2FD
    BorderColor<<Ë°®Á§∫Â±Ç>> #1976D2
    BackgroundColor<<Â∫îÁî®Â±Ç>> #F3E5F5
    BorderColor<<Â∫îÁî®Â±Ç>> #7B1FA2
    BackgroundColor<<È¢ÜÂüüÂ±Ç>> #FFF3E0
    BorderColor<<È¢ÜÂüüÂ±Ç>> #F57C00
    BackgroundColor<<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> #E8F5E9
    BorderColor<<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> #388E3C
}

skinparam class {
    BackgroundColor<<Ë°®Á§∫Â±Ç>> #BBDEFB
    BorderColor<<Ë°®Á§∫Â±Ç>> #1976D2
    BackgroundColor<<Â∫îÁî®Â±Ç>> #E1BEE7
    BorderColor<<Â∫îÁî®Â±Ç>> #7B1FA2
    BackgroundColor<<È¢ÜÂüüÂ±Ç>> #FFE0B2
    BorderColor<<È¢ÜÂüüÂ±Ç>> #F57C00
    BackgroundColor<<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> #C8E6C9
    BorderColor<<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> #388E3C
}

title DSC/TGAÁÉ≠ÂàÜÊûêËΩØ‰ª∂ - ÂõõÂ±ÇÊû∂ÊûÑËÆæËÆ°Âõæ\nÂü∫‰∫éQt/C++ÂºÄÂèë

' ========== Ë°®Á§∫Â±Ç (Presentation Layer) ==========
package "üñ•Ô∏è Ë°®Á§∫Â±Ç" <<Ë°®Á§∫Â±Ç>> {
    class MainWindow <<Ë°®Á§∫Â±Ç>> {
        - menuBar: QMenuBar*
        - toolBar: QToolBar*
        - statusBar: QStatusBar*
        - dockWidgets: QList<QDockWidget*>
        --
        + setupUI(): void
        + showProgress(msg: QString): void
        + updateCurveList(): void
        --
        <<signal>> openFileRequested()
        <<signal>> saveProjectRequested()
        <<signal>> undoRequested()
        <<signal>> redoRequested()
    }
    
    class ChartView <<Ë°®Á§∫Â±Ç>> {
        - chart: QChart*
        - series: QMap<QString, QLineSeries*>
        - rubberBand: QRubberBand*
        --
        + addCurve(id: QString, data): void
        + removeCurve(id: QString): void
        + updateCurve(id: QString): void
        + zoomToRegion(rect: QRectF): void
        + exportToImage(path: QString): void
        --
        <<signal>> regionSelected(curveId, startIdx, endIdx)
        <<signal>> pointClicked(curveId, pointIdx)
        <<signal>> zoomChanged(level: double)
    }
    
    class ToolPanel <<Ë°®Á§∫Â±Ç>> {
        - paramLayout: QFormLayout*
        - resultTable: QTableWidget*
        - propertyTree: QTreeWidget*
        --
        + showAlgorithmParams(algo): void
        + showCurveProperties(curve): void
        + showAnalysisResults(results): void
        --
        <<signal>> parameterChanged(name, value)
        <<signal>> algorithmApplied(name)
    }
    
    MainWindow *-- ChartView
    MainWindow *-- ToolPanel
}

' ========== Â∫îÁî®Â±Ç (Application Layer) ==========
package "‚öôÔ∏è Â∫îÁî®Â±Ç" <<Â∫îÁî®Â±Ç>> {
    
    package "Controllers" {
        class MainController <<Â∫îÁî®Â±Ç>> {
            - projectManager: ProjectManager*
            - curveManager: CurveManager*
            - algorithmService: AlgorithmService*
            - historyManager: HistoryManager*
            --
            + handleOpenFile(): void
            + handleSaveProject(): void
            + handleUndo(): void
            + handleRedo(): void
            + coordinateWorkflow(): void
        }
        
        class ChartController <<Â∫îÁî®Â±Ç>> {
            - curveManager: CurveManager*
            - algorithmService: AlgorithmService*
            --
            + handleRegionSelection(id, start, end): void
            + handlePointClick(id, idx): void
            + calculatePeakArea(region): double
            + updateChartDisplay(): void
        }
    }
    
    package "Services" {
        class ProjectManager <<Â∫îÁî®Â±Ç>> {
            - currentProject: ThermalProject*
            - recentProjects: QStringList
            - isModified: bool
            --
            + createProject(): ThermalProject*
            + openProject(path: QString): bool
            + saveProject(path: QString): bool
            + closeProject(): bool
            + getRecentProjects(): QStringList
            --
            <<signal>> projectOpened(project)
            <<signal>> projectSaved()
            <<signal>> projectModified()
        }
        
        class CurveManager <<Â∫îÁî®Â±Ç>> {
            - curves: QMap<QString, ThermalCurve*>
            - activeCurveId: QString
            --
            + addCurve(curve: ThermalCurve*): QString
            + removeCurve(id: QString): void
            + getCurve(id: QString): ThermalCurve*
            + getActiveCurve(): ThermalCurve*
            + setActiveCurve(id: QString): void
            --
            <<signal>> curveAdded(id, curve)
            <<signal>> curveRemoved(id)
            <<signal>> curveDataChanged(id)
            <<signal>> activeCurveChanged(id)
        }
        
        class AlgorithmService <<Â∫îÁî®Â±Ç>> {
            - algorithms: QMap<QString, IThermalAlgorithm*>
            - threadPool: QThreadPool*
            --
            + registerAlgorithm(algo): void
            + getAlgorithm(name): IThermalAlgorithm*
            + executeAsync(algo, data, callback): void
            + getAlgorithmList(): QStringList
            --
            <<signal>> algorithmStarted(name)
            <<signal>> algorithmFinished(name, result)
            <<signal>> algorithmProgress(percent)
        }
        
        class HistoryManager <<Â∫îÁî®Â±Ç>> {
            - undoStack: QStack<ICommand*>
            - redoStack: QStack<ICommand*>
            - maxHistorySize: int
            --
            + execute(cmd: ICommand*): bool
            + undo(): void
            + redo(): void
            + canUndo(): bool
            + canRedo(): bool
            + getHistory(): QList<QString>
            --
            <<signal>> historyChanged()
        }
    }
    
    MainController --> ProjectManager
    MainController --> CurveManager
    MainController --> AlgorithmService
    MainController --> HistoryManager
    ChartController --> CurveManager
    ChartController --> AlgorithmService
}

' ========== È¢ÜÂüüÂ±Ç (Domain Layer) ==========
package "üéØ È¢ÜÂüüÂ±Ç" <<È¢ÜÂüüÂ±Ç>> {
    
    package "Data Models" {
        class ThermalDataPoint <<È¢ÜÂüüÂ±Ç>> {
            - temperature: double
            - value: double
            - time: double
            - metadata: QVariantMap
            --
            + getTemperature(): double
            + getValue(): double
            + getTime(): double
            + getMetadata(key): QVariant
        }
        
        class ThermalCurve <<È¢ÜÂüüÂ±Ç>> {
            - id: QString
            - name: QString
            - rawData: QVector<ThermalDataPoint>
            - processedData: QVector<ThermalDataPoint>
            - metadata: QVariantMap
            --
            + getRawData(): const QVector<ThermalDataPoint>&
            + getProcessedData(): QVector<ThermalDataPoint>&
            + setProcessedData(data): void
            + resetToRaw(): void
            + getName(): QString
            + setName(name): void
            + getMetadata(): QVariantMap
        }
        
        class ThermalProject <<È¢ÜÂüüÂ±Ç>> {
            - name: QString
            - curves: QList<QString>
            - settings: QVariantMap
            - notes: QString
            - createdDate: QDateTime
            --
            + addCurve(curveId): void
            + removeCurve(curveId): void
            + getCurves(): QList<QString>
            + getSettings(): QVariantMap
            + setSettings(settings): void
        }
        
        ThermalCurve *-- "many" ThermalDataPoint
        ThermalProject o-- "many" ThermalCurve
    }
    
    package "Algorithm Interfaces" {
        interface IThermalAlgorithm <<È¢ÜÂüüÂ±Ç>> {
            {abstract} + process(data): QVector<ThermalDataPoint>
            {abstract} + name(): QString
            {abstract} + category(): QString
            {abstract} + parameters(): QVariantMap
            {abstract} + setParameters(params): void
        }
        
        interface ICommand <<È¢ÜÂüüÂ±Ç>> {
            {abstract} + execute(): bool
            {abstract} + undo(): void
            {abstract} + redo(): void
            {abstract} + description(): QString
        }
    }
}

' ========== Âü∫Á°ÄËÆæÊñΩÂ±Ç (Infrastructure Layer) ==========
package "üîß Âü∫Á°ÄËÆæÊñΩÂ±Ç" <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
    
    package "FileIO" {
        interface IFileReader <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            {abstract} + canRead(path): bool
            {abstract} + read(path): ThermalCurve*
            {abstract} + supportedFormats(): QStringList
        }
        
        class TAInstrumentsReader <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            + canRead(path): bool
            + read(path): ThermalCurve*
            + supportedFormats(): QStringList
        }
        
        class MettlerToledoReader <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            + canRead(path): bool
            + read(path): ThermalCurve*
            + supportedFormats(): QStringList
        }
        
        class FileReaderFactory <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - readers: QList<IFileReader*>
            --
            + registerReader(reader): void
            + getReader(path): IFileReader*
            + {static} instance(): FileReaderFactory*
        }
        
        interface IFileWriter <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            {abstract} + write(curve, path): bool
        }

        class FileWriterFactory <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - writers: QList<IFileWriter*>
            --
            + getWriter(path): IFileWriter*
        }
        
        IFileReader <|.. TAInstrumentsReader
        IFileReader <|.. MettlerToledoReader
        FileReaderFactory o-- IFileReader
        FileWriterFactory o-- IFileWriter
    }
    
    package "Algorithm" {
        class BaselineCorrector <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - method: QString
            - degree: int
            --
            + process(data): QVector<ThermalDataPoint>
            + linearBaseline(data): QVector
            + polynomialFit(data, degree): QVector
            + splineInterpolation(data): QVector
        }
        
        class SmoothingAlgorithm <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - windowSize: int
            - method: QString
            --
            + process(data): QVector<ThermalDataPoint>
            + movingAverage(data): QVector
            + savitzkyGolay(data): QVector
        }
        
        class PeakDetector <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - threshold: double
            - minPeakDistance: int
            --
            + process(data): QVector<ThermalDataPoint>
            + detectPeaks(data): QVector<Peak>
            + calculatePeakArea(peak): double
            + findPeakBoundaries(peak): QPair
        }
        
        class KineticsAnalyzer <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - model: QString
            - heatingRate: double
            --
            + process(data): QVector<ThermalDataPoint>
            + calculateActivationEnergy(data): double
            + calculatePreExponentialFactor(data): double
            + fitKineticModel(data): Result
        }
        
        IThermalAlgorithm <|.. BaselineCorrector
        IThermalAlgorithm <|.. SmoothingAlgorithm
        IThermalAlgorithm <|.. PeakDetector
        IThermalAlgorithm <|.. KineticsAnalyzer
    }
    
    package "Utility" {
        class DataDecimator <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - algorithm: QString
            - targetPoints: int
            --
            + decimate(data, level): QVector<ThermalDataPoint>
            + douglasPeucker(data, epsilon): QVector
            + lttbDecimate(data, targetCount): QVector
            + adaptiveDecimate(data, zoom): QVector
        }
        
        class DataInterpolator <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            - method: QString
            --
            + interpolate(data, x): double
            + linearInterpolation(data, x): double
            + splineInterpolation(data, x): double
            + resample(data, newRate): QVector
        }
        
        class StatisticsCalculator <<Âü∫Á°ÄËÆæÊñΩÂ±Ç>> {
            + mean(data): double
            + stdDev(data): double
            + min(data): double
            + max(data): double
            + variance(data): double
            + findPeaks(data): QVector<int>
        }
    }
}

' ========== Â±ÇÈó¥‰æùËµñÂÖ≥Á≥ª ==========
MainWindow ..> MainController : <<‰ø°Âè∑ÊßΩ>>
ChartView ..> ChartController : <<‰ø°Âè∑ÊßΩ>>
ToolPanel ..> MainController : <<‰ø°Âè∑ÊßΩ>>

MainController ..> ThermalProject : ‰ΩøÁî®
MainController ..> ThermalCurve : ‰ΩøÁî®

ProjectManager ..> ThermalProject : ÁÆ°ÁêÜ
CurveManager ..> ThermalCurve : ÁÆ°ÁêÜ
AlgorithmService ..> IThermalAlgorithm : ‰ΩøÁî®
HistoryManager ..> ICommand : ÊâßË°å

AlgorithmService ..> BaselineCorrector : Ë∞ÉÁî®
AlgorithmService ..> SmoothingAlgorithm : Ë∞ÉÁî®
AlgorithmService ..> PeakDetector : Ë∞ÉÁî®
AlgorithmService ..> KineticsAnalyzer : Ë∞ÉÁî®

ProjectManager ..> FileReaderFactory : ‰ΩøÁî®
ProjectManager ..> FileWriterFactory : ‰ΩøÁî®

ChartView ..> DataDecimator : ‰ΩøÁî®
ChartView ..> DataInterpolator : ‰ΩøÁî®

FileWriterFactory o-- IFileWriter

' Ê∑ªÂä†Ê≥®ÈáäËØ¥Êòé
note right of MainWindow
  <b>Ë°®Á§∫Â±ÇËÅåË¥£:</b>
  ¬∑ Áî®Êà∑ÁïåÈù¢Â±ïÁ§∫
  ¬∑ Áî®Êà∑‰∫§‰∫íÂìçÂ∫î
  ¬∑ ÂèëÂá∫Êìç‰Ωú‰ø°Âè∑
  ¬∑ ‰∏çÂåÖÂê´‰∏öÂä°ÈÄªËæë
end note

note right of MainController
  <b>Â∫îÁî®Â±ÇËÅåË¥£:</b>
  ¬∑ ‰∏öÂä°ÊµÅÁ®ãÂçèË∞É
  ¬∑ Ë∑®ÊúçÂä°Ë∞ÉÂ∫¶
  ¬∑ Áî®Êà∑Êìç‰ΩúÂ§ÑÁêÜ
  ¬∑ Áä∂ÊÄÅÁÆ°ÁêÜ
end note

note right of ThermalCurve
  <b>È¢ÜÂüüÂ±ÇËÅåË¥£:</b>
  ¬∑ Ê†∏ÂøÉ‰∏öÂä°Ê®°Âûã
  ¬∑ ‰∏öÂä°ËßÑÂàôÂÆö‰πâ
  ¬∑ ÁÆóÊ≥ïÊé•Âè£ÊäΩË±°
  ¬∑ È¢ÜÂüüÊ¶ÇÂøµ‰ΩìÁé∞
  
  <b>Êï∞ÊçÆ‰∏çÂèØÂèòÊÄß:</b>
  rawData - Âè™ËØªÂéüÂßãÊï∞ÊçÆ
  processedData - ÂèØ‰øÆÊîπÂ∑•‰ΩúÊï∞ÊçÆ
end note

note right of BaselineCorrector
  <b>Âü∫Á°ÄËÆæÊñΩÂ±ÇËÅåË¥£:</b>
  ¬∑ ÊäÄÊúØÂÆûÁé∞ÁªÜËäÇ
  ¬∑ ÁÆóÊ≥ïÂÖ∑‰Ωì‰ª£Á†Å
  ¬∑ Êñá‰ª∂I/OÊìç‰Ωú
  ¬∑ Â∑•ÂÖ∑Á±ªÊîØÊåÅ
  ¬∑ Êó†‰∏öÂä°ÈÄªËæë
end note

legend right
  |<#E3F2FD> Ë°®Á§∫Â±Ç | UIÁªÑ‰ª∂ (Qt Widgets/QML) |
  |<#F3E5F5> Â∫îÁî®Â±Ç | ‰∏öÂä°ÂçèË∞ÉÂíåÊúçÂä° |
  |<#FFF3E0> È¢ÜÂüüÂ±Ç | Ê†∏ÂøÉÊ®°ÂûãÂíåÊé•Âè£ |
  |<#E8F5E9> Âü∫Á°ÄËÆæÊñΩÂ±Ç | ÊäÄÊúØÂÆûÁé∞ |

  <b>‰æùËµñÊñπÂêë:</b> ‰∏äÂ±Ç ‚Üí ‰∏ãÂ±Ç
  <b>ÈÄö‰ø°ÊñπÂºè:</b>
  ¬∑ ‰ø°Âè∑ÊßΩ (Signal-Slot)
  ¬∑ Áõ¥Êé•Ë∞ÉÁî® (Direct Call)
  ¬∑ ‰æùËµñÊ≥®ÂÖ• (Dependency Injection)
end legend

@enduml
